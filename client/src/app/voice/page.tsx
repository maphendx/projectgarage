'use client';

import { useState, useCallback, useEffect, useRef } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import Topbar from '@/components/surrounding/topbar';
import AsidePanelLeft from '@/components/surrounding/asideLeft';
import { AsidePanelRight } from '@/components/surrounding/asideRight';
import { usePathname, useRouter } from 'next/navigation';
import {
  MicrophoneIcon,
  UserPlusIcon,
  Cog6ToothIcon,
  PlusIcon,
  HashtagIcon,
  SpeakerWaveIcon,
} from '@heroicons/react/24/solid';
import fetchClient, { refreshAccessToken } from '@/other/fetchClient';
import { useError } from '@/context/ErrorContext';
import { UserData } from '@/components/not_components';
import { PiPhoneDisconnectFill } from 'react-icons/pi';
import { PhoneIcon } from '@heroicons/react/20/solid';

type Channel = {
  id: number;
  name: string;
  participants?: string[];
  participants_list?: UserData[];
  creator?: UserData;
};

const API_BASE_URL = `${process.env.NEXT_PUBLIC_API_URL}/api`;

export default function VoiceChatPage() {
  // –ü–û–ß–ê–¢–û–ö –í–û–ô–°–Ü–í
  const [localStream, setLocalStream] = useState<MediaStream | null>(null);
  const [globalPeers, setGlobalPeers] = useState<{
    [key: string]: RTCPeerConnection;
  }>({});
  const [signalingChannel, setSignalingChannel] = useState<WebSocket | null>(
    null,
  );

  // —Ä–µ—Ñ–∏ –¥–ª—è –∑–∞–∫—Ä–∏—Ç—Ç—è –ø—Ä–æ–≥–∏
  const localStreamRef = useRef<MediaStream | null>(null);
  const globalPeersRef = useRef<{ [key: string]: RTCPeerConnection }>({});
  const signalingChannelRef = useRef<WebSocket | null>(null);
  useEffect(() => {
    localStreamRef.current = localStream;
    globalPeersRef.current = globalPeers;
    signalingChannelRef.current = signalingChannel;
  }, [signalingChannel, globalPeers, localStream]);

  const endCall = () => {
    console.log('–ó–∞–∫—ñ–Ω—á—É—î–º–æ –¥–∑–≤—ñ–Ω–æ–∫ ‚ùå');
    signalingChannelRef.current?.send(JSON.stringify({ type: 'leave' }));
    Object.values(globalPeersRef.current).forEach((elementus) => {
      elementus.onicecandidate = null;
      elementus.ontrack = null;
      elementus.oniceconnectionstatechange = null;
      elementus.close();
    });
    setGlobalPeers({});
    localStreamRef.current?.getTracks().forEach((track) => {
      if (track.kind === 'audio') track.stop();
    });
    setLocalStream(null);
    signalingChannelRef.current?.close();
    setSignalingChannel(null);
    setSelectedChannel(null);
    setIsMuted(false);
  };

  const startCall = async () => {
    playSound('start');
    try {
      const stream = await navigator.mediaDevices.getUserMedia({
        audio: {
          echoCancellation: true,
          noiseSuppression: true,
          autoGainControl: true,
        },
      });
      console.log(`–ù–ê–® –°–Ü–ì–ú–ê –ú–Ü–ö–†–û–§–û–ù –Ñ ${stream}`);
      setLocalStream(stream);

      ///
      console.log('üé§ –ú—ñ–∫—Ä–æ—Ñ–æ–Ω –æ—Ç—Ä–∏–º–∞–Ω–æ');
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –º—ñ–∫—Ä–æ—Ñ–æ–Ω–∞:', error);
    }
  };

  const createPeerConnection = (userId: string, isInitiator: boolean) => {
    console.log('–ü–†–û–ë–£–Æ –ó');
    console.log(`–ô–û–ì–û –í–ï–õ–ò–ß localStream –∑–∞—Ä–∞–∑ —Å–µ —î ${localStream}`);
    console.log(`–ô–û–ì–û –í–ï–õ–ò–ß signalingChannel –∑–∞—Ä–∞–∑ —Å–µ —î ${signalingChannel}`);

    const peerConnection = new RTCPeerConnection({
      iceServers: [
        {
          urls: 'stun:stun.l.google.com:19302', // –ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–π STUN-—Å–µ—Ä–≤–µ—Ä –≤—ñ–¥ Google
        },
        {
          urls: 'turn:turn.server.com:3478', // –¶–µ –ø—Ä–∏–∫–ª–∞–¥ TURN-—Å–µ—Ä–≤–µ—Ä–∞. –î–ª—è Google STUN –Ω–µ –ø–æ—Ç—Ä—ñ–±–µ–Ω TURN.
          username: 'user',
          credential: 'password',
        },
      ],
    });

    const peers = { ...globalPeers };
    peers[userId] = peerConnection;
    setGlobalPeers(peers);

    localStream
      ?.getTracks()
      .forEach((track) => peerConnection.addTrack(track, localStream));

    peerConnection.onicecandidate = (event) => {
      if (event.candidate) {
        console.log(`–í –º–æ–º–µ–Ω—Ç—ñ –∫–∞–Ω–∞–ª —î ${signalingChannel}`);
        signalingChannel?.send(
          JSON.stringify({
            type: 'candidate',
            candidate: event.candidate,
            to: userId,
          }),
        );
        console.log('üì® –ù–∞–¥—ñ—Å–ª–∞–Ω–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞');
      }
    };

    const audioContext = new AudioContext();
    const analyser = audioContext.createAnalyser();

    peerConnection.ontrack = (event) => {
      const remoteAudio = document.createElement('audio');
      remoteAudio.srcObject = event.streams[0];
      remoteAudio.play();
      console.log('üîä –í—ñ–¥—Ç–≤–æ—Ä—é—î–º–æ –∞—É–¥—ñ–æ –≤—ñ–¥:', userId);
      playSound('happiness');

      const source = audioContext.createMediaStreamSource(event.streams[0]);
      source.connect(analyser);

      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä—ñ–≤–µ–Ω—å –∑–≤—É–∫—É –∫–æ–∂–Ω—ñ 100 –º—Å
      const checkAudioLevel = () => {
        const buffer = new Uint8Array(analyser.frequencyBinCount);
        analyser.getByteFrequencyData(buffer);

        const volume =
          buffer.reduce((sum, val) => sum + val, 0) / buffer.length;
        if (!volume) return;

        console.log(`üéöÔ∏è –ì—É—á–Ω—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${userId}:`, volume);
        setParticipants((prevParticipants) => {
          return prevParticipants.map((participant) => {
            if (`${participant.id}` === `${userId}`) {
              return { ...participant, talks: volume }; // –û–Ω–æ–≤–ª—é—î–º–æ –ª–∏—à–µ —Ü–µ–π –æ–±'—î–∫—Ç
            }
            return participant; // –Ü–Ω—à—ñ –∑–∞–ª–∏—à–∞—é—Ç—å—Å—è –Ω–µ–∑–º—ñ–Ω–Ω–∏–º–∏
          });
        });
      };

      setInterval(checkAudioLevel, 50);
    };

    peerConnection.oniceconnectionstatechange = () => {
      console.log('–í –ø—ñ—Ä–∞—Ö —Ç—Ä–∞–ø–∏–ª–æ—Å—å –ª–∞–π–Ω–æ');

      if (
        peerConnection.iceConnectionState === 'disconnected' ||
        peerConnection.iceConnectionState === 'failed' ||
        peerConnection.iceConnectionState === 'closed'
      ) {
        console.log(`‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á ${userId} –≤—ñ–¥–∫–ª—é—á–∏–≤—Å—è`);
        playSound('lost');
        peerConnection.close(); // –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
        const peers = { ...globalPeers };
        delete peers[userId]; // –í–∏–¥–∞–ª—è—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –º–∞–ø–∏
        setGlobalPeers(peers);
      }
    };

    if (isInitiator) {
      peerConnection
        .createOffer()
        .then((offer) => peerConnection.setLocalDescription(offer))
        .then(() => {
          signalingChannel?.send(
            JSON.stringify({
              type: 'offer',
              offer: peerConnection.localDescription,
              to: userId,
            }),
          );
          console.log('üì® –ù–∞–¥—ñ—Å–ª–∞–Ω–æ offer');
        });
    }

    return peerConnection;
  };

  useEffect(() => {
    console.log('–ü–û–¢–û–ß–ù–ò–ô –°–¢–ê–ù –ü–Ü–î–ö–õ–Æ–ß–ï–ù–¨:', JSON.stringify(globalPeers));
    updateUsers();
  }, [globalPeers]);

  useEffect(() => {
    if (!signalingChannel) {
      console.log('–ö–∞–Ω–∞–ª –≤–µ–±-—Å–æ–∫–µ—Ç—ñ–≤ –Ω–∞—Ä–∞–∑—ñ –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ...');
      return;
    }
    console.log(
      '–ö–∞–Ω–∞–ª –≤–µ–±-—Å–æ–∫–µ—Ç—ñ–≤ —É—Å–ø—ñ—à–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ. –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤...',
    );

    signalingChannel.onopen = () => {
      signalingChannel.send(JSON.stringify({ type: 'join' }));
    };

    signalingChannel.onclose = () => {
      console.log('–°–æ–∫–µ—Ç –∑–∞–∫—Ä–∏–≤—Å—è');
    };
    // –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å WebSocket
    signalingChannel.onmessage = async (message) => {
      const data = JSON.parse(message.data);
      console.log('üì© –û—Ç—Ä–∏–º–∞–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:', data);

      if (data.type === 'user-list') {
        console.log('üë• –°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:', data.users);

        // –í–∏–¥–∞–ª—è—î–º–æ —Ç–∏—Ö, –∫–æ–≥–æ –±—ñ–ª—å—à–µ –Ω–µ–º–∞—î –≤ —Å–ø–∏—Å–∫—É
        const peers: { [key: string]: RTCPeerConnection } = { ...globalPeers };
        Object.keys(peers).forEach((userId) => {
          if (!data.users.includes(userId)) {
            console.log(`‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á ${userId} –∑–Ω–∏–∫, –≤–∏–¥–∞–ª—è—î–º–æ`);
            peers[userId].close();
            delete peers[userId];
            setGlobalPeers(peers);
          }
        });

        data.users.forEach((userId: string) => {
          if (!peers[userId]) {
            createPeerConnection(userId, true);
          } else {
            console.log(`üîÑ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á ${userId} –≤–∂–µ —î, –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞–Ω...`);

            if (
              peers[userId].iceConnectionState === 'disconnected' ||
              peers[userId].iceConnectionState === 'failed' ||
              peers[userId].iceConnectionState === 'closed'
            ) {
              console.log(`‚ôªÔ∏è –ü–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ ${userId}`);
              peers[userId].close();
              delete peers[userId];
              createPeerConnection(userId, true);
            }
          }
        });
      } else if (data.type === 'offer') {
        const newPeer = await createPeerConnection(data.from, false);
        await newPeer.setRemoteDescription(
          new RTCSessionDescription(data.offer),
        );
        const answer = await newPeer.createAnswer();
        await newPeer.setLocalDescription(answer);
        signalingChannel.send(
          JSON.stringify({ type: 'answer', answer, to: data.from }),
        );
        console.log('üì® –ù–∞–¥—ñ—Å–ª–∞–Ω–æ answer');
      } else if (data.type === 'answer') {
        await globalPeers[data.from].setRemoteDescription(
          new RTCSessionDescription(data.answer),
        );
        console.log('‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ answer');
      } else if (data.type === 'candidate') {
        await globalPeers[data.from].addIceCandidate(
          new RTCIceCandidate(data.candidate),
        );
        console.log('üéØ –û—Ç—Ä–∏–º–∞–Ω–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞');
      } else if (data.type === 'request-status') {
        signalingChannel?.send(
          JSON.stringify({ type: 'mute-status', isMuted: isMuted }),
        );
      } else if (data.type === 'mute-status') {
        // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å mute –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        setParticipants((prevParticipants) => {
          return prevParticipants.map((participant) => {
            if (`${participant.id}` === `${data.from}`) {
              return { ...participant, muted: data.isMuted }; // –û–Ω–æ–≤–ª—é—î–º–æ –ª–∏—à–µ —Ü–µ–π –æ–±'—î–∫—Ç
            }
            return participant; // –Ü–Ω—à—ñ –∑–∞–ª–∏—à–∞—é—Ç—å—Å—è –Ω–µ–∑–º—ñ–Ω–Ω–∏–º–∏
          });
        });

        console.log(
          `–ü–∞—Ü–∞–Ω –ø—ñ–¥ –∫–æ–¥–æ–≤–∏–º –Ω–æ–º–µ—Ä–æ–º ${data.from} –º—ñ–∫—Ä–æ –ø–µ—Ä–µ–º–∫–Ω—É–≤ –Ω–∞ ${data.isMuted}`,
        );
      } else if (data.type === 'leave') {
        console.log(
          `‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á ${data.from} –≤–∏–π—à–æ–≤ (—Å–∞–º —Å–∫–∞–∑–∞–≤), –∑–∞–∫—Ä–∏–≤–∞—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è`,
        );
        playSound('goodbye');
        if (globalPeers[data.from]) {
          globalPeers[data.from].close();
          const peers = { ...globalPeers };
          delete peers[data.from];
          setGlobalPeers(peers);
        }
      }
    };
  }, [signalingChannel, globalPeers]);

  useEffect(() => {
    if (localStream) {
      console.log(
        'localStream —É—Å–ø—ñ—à–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ! –ó–∞–ø—É—Å–∫–∞—î–º –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ —Å–æ–∫–µ—Ç—ñ–≤',
      );
      init();
      return () => signalingChannel?.close();
    } else {
      console.log('localStream –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ...');
    }
  }, [localStream]);

  const init = async () => {
    if (selectedChannel) {
      const token = await refreshAccessToken();
      const abobaUrl = `${process.env.NEXT_PUBLIC_API_URL}`;
      const wsUrl = `${abobaUrl.replace(/^http/, 'ws').replace(/^https/, 'wss')}/ws/voice/${selectedChannel.id}/?token=${token}`;
      const webSocket = new WebSocket(wsUrl);
      setSignalingChannel(webSocket);
    } else {
      console.log('–ö–∞–Ω–∞–ª –Ω–µ –æ–±—Ä–∞–Ω–æ, –Ω–µ –º–æ–∂–µ–º–æ –ø—ñ–¥–∫–ª—é—á–∞—Ç–∏—Å—å!');
    }
  };

  /*
    –ü–æ—Ä—è–¥–æ–∫ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É —Ç–∞–∫–∏–π:
    1. –±–æ–º–∂ –∫–ª—ñ–∫–∞—î –Ω–∞ –∫–Ω–æ–ø–∫—É, –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è startCall, 
    —Å—Ç–≤–æ—Ä—é—î—Ç—å—Å—è –∞—É–¥—ñ–æ–ø–æ—Ç—ñ–∫ —ñ –∑–∞–ø–∏—Å—É—î—Ç—å—Å—è —É —Å—Ç–∞–Ω.
    2. –©–æ–π–Ω–æ –≤—ñ–Ω –ø—Ä–æ—ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–≤–∞–≤—Å—è, –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –¥–æ –Ω—å–æ–≥–æ —Ö—É–∫,
    —ñ —è–∫—â–æ —Ç–æ–π –∑–≤—É–∫–æ–≤–∏–π –ø–æ—Ç—ñ–∫ –∑–∞–ø–∏—Å–∞–≤—Å—è ("if (localStream)"),
    —Ç–æ –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è —Ñ—É–Ω–∫—Ü—ñ—è init()
    3. –§—É–Ω–∫—Ü—ñ—è init —Å—Ç–≤–æ—Ä—é—î –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –≤–µ–±-—Å–æ–∫–µ—Ç—ñ–≤ —ñ –∑–∞–ø–∏—Å—É—î —É —Å—Ç–∞–Ω
    4. –©–æ–π–Ω–æ —Å—Ç–∞–Ω –∑ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è–º –¥–æ –≤–µ–± —Å–æ–∫–µ—Ç—ñ–≤ signalingChannel
    —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø–∏—Å–∞–≤—Å—è —Ç—É–¥–∏, –π–æ–º—É –ø—Ä–∏—Å–≤–æ—é—é—Ç—å—Å—è –æ–±—Ä–æ–±–Ω–∏–∫–∏.
    ---
    –ü—Ä–∏ –ø–æ—á–∞—Ç–∫—É —Ç—Ä–∏–Ω–¥—ñ–Ω–Ω—è —Ç–∞–∫–∏–π:
    1. –ö–æ–ª–∏ –∑–∞–ø–∏—Å—É–≤–∞–ª–∏—Å—å –æ–±—Ä–æ–±–Ω–∏–∫–∏, –æ–±—Ä–æ–±–Ω–∏–∫ onopen –Ω–∞–¥—ñ—Å–ª–∞–≤ –ø—É—Å—Ç–µ
    –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ç–∏–ø–æ–º "join"
    2. –°–µ—Ä–≤–∞–∫, –ø—Ä–∏ —Ç–∞–∫–æ–º—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ, –Ω–∞–∑–∞–¥ –Ω–∞–º –∂–µ –ø—Ä–∏—Å–∏–ª–∞—î
    —Å–ø–∏—Å–æ–∫ –∑ id —ñ–Ω—à–∏—Ö –ø—ñ–¥–∫–ª—é—á–µ–Ω–∏—Ö –¥–µ–≥–µ–Ω–µ—Ä–∞—Ç—ñ–≤ (–æ–∫—Ä—ñ–º –Ω–∞—Å)
    (—Ü–µ —î –∑ —Ç–∏–ø–æ–º "user-list")
    3. –ú–∏, –ø–æ –æ–¥–µ—Ä–∂–∞–Ω–Ω—é —Ç–∞–∫–æ–≥–æ —Ç–∏–ø—É, –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∞–π–¥—ñ –≤–∏–∫–ª–∏–∫–∞—î–º–æ
    createPeerConnection = (userId: string, isInitiator: boolean)
    –¥–µ –¥—Ä—É–≥–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∑–∞ —Ç–µ, —á–∏ —Ü–µ –º–∏ —Ç–æ –∑'—î–¥–Ω–∞–Ω–Ω—è –ø–æ—á–∞–ª–∏
    –≤—Å—Ç–∞–Ω–æ–≤–ª—é–≤–∞—Ç–∏ (true), —á–∏ —Ü–µ –º–∏ –≤–∂–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ –Ω–∞ —á–∏–π—Å—å offer
    (false)
    4. –î–∞–ª—ñ –º—ñ–∂ –Ω–∞–º–∏ —Ç–∞ —ñ–Ω—à–∏–º–∏ —á–µ–ª–∞–º–∏ –π–¥–µ –ø—Ä–æ—Å—Ç–æ –æ–±–º—ñ–Ω offer, answer,
    —Ç–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞–º–∏ (—Å–µ—Ä–≤–µ—Ä –∑ –≤–µ–±-—Å–æ–∫–µ—Ç–∞–º–∏ - —Ü–µ –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Å–∏–ª—å—â–∏–∫, –≤—ñ–Ω
    —Ç—ñ–ª—å–∫–∏ –Ω–∞–¥—Å–∏–ª–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –æ–¥–Ω–æ–≥–æ –¥–æ —ñ–Ω—à–æ–≥–æ, —î–¥–∏–Ω–µ —â–æ —É—Ç–æ—á–Ω—é—é—á–∏
    –ø–æ–ª–µ "from")
  */

  // –ö–Ü–ù–ï–¶–¨ –í–û–ô–°–Ü–í

  const router = useRouter();
  const { showError } = useError();
  const [userData, setUserData] = useState<UserData | null>(null);
  const [isMuted, setIsMuted] = useState(false);
  const [isCreatingChannel, setIsCreatingChannel] = useState(false);
  const [newChannelName, setNewChannelName] = useState('');
  const [newChannelParticipantsField, setNewChannelParticipantsField] =
    useState('');
  const [newChannelParticipants, setNewChannelParticipants] = useState<
    string[]
  >([]);
  const [selectedChannel, setSelectedChannel] = useState<Channel | null>(null);
  const [channels, setChannels] = useState<Channel[]>([]);

  const [participants, setParticipants] = useState<UserData[]>([]);

  // useEffect(() => {
  //   console.log(`–ú–æ–Ω—ñ—Ç–æ—Ä–∏–º–æ –±–æ–º–∂—ñ–≤: ${JSON.stringify(participants)}`)
  // }, [participants])

  const updateUsers = async () => {
    const existingUsersMap = new Map(
      participants.map((user) => [user.id, user]),
    );

    const users = await Promise.all(
      Object.keys(globalPeers).map(async (key) => {
        const data = await apiRequest(`/users/profile/${key}/`);
        data.id = +key;
        const existingUser = existingUsersMap.get(+key);
        if (existingUser) {
          return existingUser;
        } else {
          return data;
        }
      }),
    );
    setParticipants(users);
    signalingChannel?.send(JSON.stringify({ type: 'request-status' }));
  };

  const apiRequest = useCallback(
    async (endpoint: string, method: string = 'GET', body?: any) => {
      const headers = {
        'Content-Type': 'application/json',
      };
      if (!headers) return null;
      try {
        const response = await fetchClient(`${API_BASE_URL}${endpoint}`, {
          method,
          headers,
          ...(body && { body: body }),
        });
        const result = await response.json();
        if (!response.ok) {
          throw Error(JSON.stringify(result));
        }
        return result;
      } catch (err) {
        if (err instanceof Error) {
          try {
            const obj = JSON.parse(err.message);
            if (typeof obj === 'object' && obj !== null) {
              const result = Object.values(obj).flat().join('\n');
              showError(result, 'error');
            } else {
              showError('–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É', 'error');
            }
          } catch (parseErr) {
            showError(err.message, 'error');
          }
        }
      }
    },
    [],
  );

  useEffect(() => {
    if (selectedChannel) {
      startCall();
    }
  }, [selectedChannel]);

  useEffect(() => {
    return () => {
      endCall();
    };
  }, []);

  useEffect(() => {
    const fetchProfile = async () => {
      const data = await apiRequest('/users/profile/');
      if (data) setUserData(data);
    };
    const fetchMyVoices = async () => {
      const data = await apiRequest('/voice_channels/my-channels/');
      if (data) setChannels(data);
    };
    fetchProfile();
    fetchMyVoices();
  }, [apiRequest]);

  const toggleMute = () => {
    localStream?.getAudioTracks().forEach((element) => {
      element.enabled = isMuted;
    });
    signalingChannel?.send(
      JSON.stringify({ type: 'mute-status', isMuted: !isMuted }),
    );
    setIsMuted(!isMuted);
  };

  const handleAddUser = useCallback(() => {
    if (newChannelParticipantsField.trim()) {
      setNewChannelParticipants((prev) => {
        if (prev.includes(newChannelParticipantsField)) {
          showError('–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ –¥–æ–¥–∞–Ω–∏–π!', 'warning');
          return prev;
        }
        if (
          userData &&
          userData.display_name &&
          userData.display_name === newChannelParticipantsField
        ) {
          showError(
            '–í–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Å—Ç–∞–Ω–µ—Ç–µ —É—á–∞—Å–Ω–∏–∫–æ–º, —è–∫ –æ—Ç–µ—Ü—å –≤–æ–π—Å—É!',
            'warning',
          );
          return prev;
        }
        return [...prev, newChannelParticipantsField];
      });
      setNewChannelParticipantsField('');
    } else {
      showError("–í–∫–∞–∂—ñ—Ç—å —ñ–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è!", 'warning');
    }
  }, [newChannelParticipantsField, showError]);

  const handleCreateChannel = async () => {
    if (newChannelName.trim()) {
      const newChannel = {
        name: newChannelName.trim(),
        participants: newChannelParticipants,
      };

      const createChannelRequest = await apiRequest(
        '/voice_channels/voice_channels/',
        'POST',
        JSON.stringify(newChannel),
      );
      if (createChannelRequest) {
        setChannels([...channels, createChannelRequest]);
        setNewChannelName('');
        setNewChannelParticipants([]);
        setIsCreatingChannel(false);
        showError('–ì–æ–ª–æ—Å–æ–≤–∏–π –∫–∞–Ω–∞–ª —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ!', 'success');
      }
    } else {
      showError('–í–∫–∞–∂—ñ—Ç—å –Ω–∞–∑–≤—É –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª—É!', 'error');
    }
  };

  const handleDeleteChannel = async (id: number) => {
    const deleteChannelRequest = await apiRequest(
      `/voice_channels/voice_channels/${id}/`,
      'DELETE',
    );
    if (deleteChannelRequest) {
      setChannels((prev) => prev.filter((elementus) => id !== elementus.id));
      showError('–ì–æ–ª–æ—Å–æ–≤–∏–π –∫–∞–Ω–∞–ª —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ!', 'success');
      if (selectedChannel && selectedChannel.id === id) {
        setSelectedChannel(null);
      }
    }
  };

  function numberToGrayHex(num: number, other: string) {
    // –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ –≤ —Ü—ñ–ª–µ —á–∏—Å–ª–æ —Ç–∞ –æ–±–º–µ–∂—É—î–º–æ –º–µ–∂–∞–º–∏ –≤—ñ–¥ 0 –¥–æ 255
    num = Math.min(255, Math.max(0, Math.round(Number(num))));

    // –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ —á–∏—Å–ª–æ –≤ HEX —ñ –¥–æ–¥–∞—î–º–æ "0" —Å–ø–µ—Ä–µ–¥—É, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
    const hexValue = num.toString(16).padStart(2, '0');

    // –§–æ—Ä–º—É—î–º–æ —Å—ñ—Ä–∏–π –∫–æ–ª—ñ—Ä, –¥–µ –≤—Å—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏ (R, G, B) –æ–¥–Ω–∞–∫–æ–≤—ñ
    return `#${other}${hexValue}${other}`;
  }

  const playSound = (name: string) => {
    const audio = new Audio(`/sounds/${name}.mp3`); // –í–∫–∞–∑—É—î–º–æ —à–ª—è—Ö –¥–æ –∑–≤—É–∫—É
    audio.play(); // –í—ñ–¥—Ç–≤–æ—Ä—é—î–º–æ –∑–≤—É–∫
  };

  return (
    <motion.div
      className='flex min-h-screen flex-col bg-[#1C1C1F] text-white'
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      exit={{ opacity: 0 }}
      transition={{ duration: 0.5 }}
    >
      <motion.header
        className='sticky top-0 z-30 h-[92px] bg-[#1C1C1F]'
        initial={{ y: -50, opacity: 0 }}
        animate={{ y: 0, opacity: 1 }}
        transition={{ type: 'spring', stiffness: 100 }}
      >
        <Topbar paramUserData={userData} />
      </motion.header>

      <div className='flex flex-1 overflow-hidden'>
        {/* Icon Navigation */}
        <aside className='sticky top-0 z-20 h-screen w-20 flex-shrink-0 border-r border-[#2D2D35] bg-[#1C1C1F]'>
          <AsidePanelLeft />
        </aside>

        {/* Channels Panel */}
        <aside className='sticky top-0 z-20 h-screen w-64 flex-shrink-0 border-r border-[#2D2D35] bg-[#1C1C1F]'>
          <div className='p-4'>
            <div className='mb-4 flex items-center justify-between'>
              <h2 className='text-xl font-bold text-white'>–ì–æ–ª–æ—Å–æ–≤—ñ –∫–∞–Ω–∞–ª–∏</h2>
              <motion.button
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
                onClick={() => setIsCreatingChannel(true)}
                className='rounded-lg bg-[#25252B] p-2 hover:bg-[#2D2D35]'
              >
                <PlusIcon className='h-5 w-5 text-[#6374B6]' />
              </motion.button>
            </div>
            {isCreatingChannel && (
              <div className='mb-4'>
                <input
                  type='text'
                  value={newChannelName}
                  onChange={(e) => setNewChannelName(e.target.value)}
                  placeholder='–ù–∞–∑–≤–∞ –∫–∞–Ω–∞–ª—É'
                  className='mb-2 w-full rounded bg-[#25252B] p-2 text-white'
                />
                <div className='flex'>
                  <input
                    type='text'
                    value={newChannelParticipantsField}
                    onChange={(e) =>
                      setNewChannelParticipantsField(e.target.value)
                    }
                    placeholder='–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á'
                    className='mb-2 w-full rounded bg-[#25252B] p-2 text-white'
                  />
                  <button
                    onClick={handleAddUser}
                    className='mb-2 ml-2 flex-1 rounded bg-[#6374B6] p-1 hover:bg-opacity-70'
                  >
                    <i className='fa-solid fa-plus text-[#25252B]'></i>
                  </button>
                </div>
                {newChannelParticipants.map((participant, key) => (
                  <div
                    key={key}
                    className='mb-2 flex w-full rounded bg-[#25252B] p-2 text-white'
                  >
                    <p className='w-full'>{participant}</p>
                    <button
                      onClick={() =>
                        setNewChannelParticipants((prev) =>
                          prev.filter((elmt, elmt_key) => elmt_key !== key),
                        )
                      }
                    >
                      <i className='fas fa-times text-[#6374B6]'></i>
                    </button>
                  </div>
                ))}
                <div className='flex gap-2'>
                  <button
                    onClick={handleCreateChannel}
                    className='flex-1 rounded bg-[#6374B6] p-2 hover:bg-opacity-70'
                  >
                    –°—Ç–≤–æ—Ä–∏—Ç–∏
                  </button>
                  <button
                    onClick={() => setIsCreatingChannel(false)}
                    className='flex-1 rounded bg-[#25252B] p-2 hover:bg-[#2D2D35]'
                  >
                    –°–∫–∞—Å—É–≤–∞—Ç–∏
                  </button>
                </div>
              </div>
            )}

            <div className='space-y-2'>
              {channels.map((channel, key) => (
                <div className='flex' key={key}>
                  <motion.button
                    onClick={() => setSelectedChannel(channel)}
                    className={`flex w-full items-center justify-between rounded-lg p-3 ${
                      selectedChannel &&
                      selectedChannel.id &&
                      selectedChannel.id === channel.id
                        ? 'bg-[#6374B6]'
                        : 'bg-[#25252B] hover:bg-[#2D2D35]'
                    }`}
                    whileHover={{ scale: 1.02 }}
                    whileTap={{ scale: 0.98 }}
                  >
                    <div className='flex items-center gap-2'>
                      <HashtagIcon className='h-4 w-4 text-[#6374B6]' />
                      <span>{channel?.name}</span>
                    </div>
                  </motion.button>
                  {userData &&
                    channel.creator &&
                    channel.id &&
                    userData.display_name === channel.creator.display_name && (
                      <button
                        onClick={(e) => handleDeleteChannel(channel.id)}
                        className='ml-2 rounded bg-[#6374B6] p-2 hover:bg-opacity-70'
                      >
                        <i className='fas fa-times text-[#2D2D35]'></i>
                      </button>
                    )}
                </div>
              ))}
            </div>
          </div>
        </aside>

        <main className='flex-1 overflow-y-auto p-6'>
          {selectedChannel && (
            <div className='mb-6'>
              <h1 className='mb-2 text-2xl font-bold text-white'>
                {selectedChannel.name}
              </h1>
              <p className='text-gray-400'>
                {selectedChannel.participants_list?.length} –∑–∞–≥–∞–ª–æ–º
              </p>
              <p className='text-green-600'>
                {participants.length + 1} –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ
              </p>
            </div>
          )}

          <motion.div
            className='grid grid-cols-2 gap-4 md:grid-cols-3 lg:grid-cols-4'
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            transition={{ delay: 0.2 }}
          >
            <AnimatePresence>
              {participants.map((user, key) => (
                <motion.div
                  key={key}
                  initial={{ opacity: 0, scale: 0.9 }}
                  animate={{ opacity: 1, scale: 1 }}
                  exit={{ opacity: 0, scale: 0.9 }}
                  className='relative flex flex-col items-center rounded-2xl bg-[#1E1E24] p-4'
                >
                  <div className='relative'>
                    <div
                      style={{
                        borderColor: user.talks
                          ? numberToGrayHex(user.talks * 10, '00')
                          : '#000000',
                        boxShadow: `0 4px 20px rgba(0, ${user.talks ? user.talks * 10 : 0}, 0, 0.75)`,
                      }}
                      className={`h-20 w-20 overflow-hidden rounded-full border-4 bg-[#2D2D35]`}
                    >
                      {user.photo && (
                        <img
                          src={user.photo}
                          className='h-full w-full object-cover'
                        />
                      )}
                      <div className='absolute bottom-0 right-0 flex h-6 w-6 items-center justify-center rounded-full bg-[#2D2D35]'>
                        {user.muted ? (
                          <MicrophoneIcon className='h-4 w-4 text-red-500' />
                        ) : (
                          <SpeakerWaveIcon className='h-4 w-4 text-green-500' />
                        )}
                      </div>
                    </div>
                  </div>
                  <h3 className='mt-2 text-center font-medium text-white'>
                    {user.display_name}
                  </h3>
                  {user.photo && (
                    <motion.div
                      style={{
                        borderColor: `${user.talks ? numberToGrayHex(user.talks * 10, 'AA') : '#4A004A'}`,
                      }}
                      className='absolute inset-0 rounded-2xl border-2'
                      initial={{ opacity: 0 }}
                      animate={{ opacity: 1 }}
                    />
                  )}
                </motion.div>
              ))}
            </AnimatePresence>
          </motion.div>

          {selectedChannel && (
            <div className='fixed bottom-8 left-1/2 -translate-x-1/2 transform'>
              <div className='flex items-center gap-4 rounded-full bg-[#25252B] p-2'>
                <motion.button
                  whileHover={{ scale: 1.05 }}
                  whileTap={{ scale: 0.95 }}
                  className={`rounded-full p-4 ${
                    isMuted ? 'bg-red-500' : 'bg-[#6374B6]'
                  } transition-colors`}
                  onClick={toggleMute}
                >
                  <MicrophoneIcon className='h-6 w-6 text-white' />
                </motion.button>

                <motion.button
                  whileHover={{ scale: 1.05 }}
                  whileTap={{ scale: 0.95 }}
                  className='rounded-full bg-red-500 p-4 transition-colors'
                  onClick={() => {
                    endCall();
                    playSound('end');
                  }}
                >
                  –í–∏–π—Ç–∏
                </motion.button>

                {/* <motion.button
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
                className='rounded-full bg-[#2D2D35] p-4'
              >
                <UserPlusIcon className='h-6 w-6 text-[#6374B6]' />
              </motion.button>

              <motion.button
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
                className='rounded-full bg-[#2D2D35] p-4'
              >
                <Cog6ToothIcon className='h-6 w-6 text-[#6374B6]' />
              </motion.button> */}
              </div>
            </div>
          )}
        </main>

        <aside className='sticky top-0 hidden h-screen w-80 flex-shrink-0 border-l border-[#2D2D35] bg-[#1C1C1F] lg:block'>
          <AsidePanelRight />
        </aside>
      </div>
    </motion.div>
  );
}
