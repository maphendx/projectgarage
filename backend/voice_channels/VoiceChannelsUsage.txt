Voice Channels Usage Instructions
===================================

1. Опис функціоналу:
   - Ця частина проекту відповідає за створення та управління голосовими каналами.
   - Можна створювати нові голосові канали, отримувати список існуючих та надсилати запрошення користувачам для участі у каналі.
   - Також реалізовано websocket‑комунікацію для передачі аудіо/сигналізаційних повідомлень між користувачами.

2. HTTP Endpoints:
   - Отримання списку каналів:
     • GET /api/voice_channels/voice_channels/
       – Повертає JSON із списком всіх голосових каналів.
     
   - Створення нового каналу:
     • POST /api/voice_channels/voice_channels/
       – Передайте необхідні дані (наприклад, name, інші поля згідно VoiceChannelSerializer).
       – Канал створюється із прив’язкою до поточного користувача (creator).

   - Отримання даних конкретного каналу:
     • GET /api/voice_channels/voice_channels/<ID>/
       – Повертає дані для каналу з заданим ID.
     
   - Надсилання запрошення до каналу:
     • POST /api/voice_channels/invite/
       – Дані запиту повинні відповідати InvitationSerializer (наприклад, вказати addressee/recipient та voice_channel).
       – Після створення запрошення відправляється повідомлення через канал сповіщень:
         Наприклад: "notifications_{addressee_id}".
       • Зауваження: перевірте коректність іменування (у моделі поле називається "addressee", а у view може використовуватись "recipient").

3. WebSocket Комунікація:
   - Голосовий канал:
     • URL: ws://<host>/ws/voice/<room_name>/
     • Після підключення користувач приєднується до групи "voice_<room_name>".
     • Повідомлення, надіслані через цей канал, транслюються всім учасникам, окрім відправника.
   
   - Сигналізація для переговорів (наприклад, для WebRTC):
     • URL: ws://<host>/ws/signaling/
     • Після підключення клієнт надсилає повідомлення типу "join" для отримання свого унікального ідентифікатора.
     • Для передачі сигналізаційних даних (offer, answer, candidate) надсилайте JSON‑повідомлення з полем "to", яке вказує ID іншого користувача.
     • Сигналізаційні повідомлення передаються безпосередньо на канал цільового підключення.
   
4. Запуск і тестування:
   - Переконайтесь, що сервер Django запущено, а також Channels налаштовано й підключено (якщо використовується InMemoryChannelLayer – це підходить для тестування).
   - Для тестування websocket‑коннекшенів можна використовувати будь-який websocket‑клієнт (наприклад, wscat або спеціальні розширення для браузера).
   - Використовуйте відповідні HTTP запити через Postman або подібні інструменти для взаємодії із REST‑API.

5. Подальші покращення:
   - Використовувати більш стабільне сховище для сигналізаційних даних у продакшн‑середовищі (наприклад, Redis).